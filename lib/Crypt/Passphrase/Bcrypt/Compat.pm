package Crypt::Passphrase::Bcrypt::Compat;

use strict;
use warnings;

use parent 'Crypt::Passphrase::Validator';

use Crypt::Eksblowfish::Bcrypt qw/bcrypt en_base64/;

sub new {
	my ($class) = @_;
	return bless {}, $class;
}

sub accepts_hash {
	my ($hash) = @_;
	return $hash =~ /^\$2a?\$/;
}

sub verify_password {
	my ($class, $password, $hash) = @_;
	return bcrypt($password, $hash) eq $hash;
}

1;

#ABSTRACT: A bcrypt validator for Crypt::Passphrase

=head1 SYNOPSIS

 my $passphrase = Crypt::Passphrase->new(
   encoder => {
     module => 'Bcrypt',
     cost   => 12,
   },
   validator => [ 'Bcrypt::Compat' ],
 );

=head1 DESCRIPTION

This module exists to support checking C<$2$> type bcrypt hashes (as opposed to more modern variants like C<$2b$> or C<$2a$>) as sometimes generated by L<Crypt::Eksblowfish::Bcrypt|Crypt::Eksblowfish::Bcrypt>. This ancient variant is not supported by by modern bcrypt implementations, hence the need for this compatability implementation. It should not be necessary for any other purpose.
